{"version":3,"sources":["../../src/utils.ts","../../src/reducer.ts","../../src/provider.tsx","../../src/useUnidata.tsx","logger.js","counter.js","model/todos.js","addTodo.js","todoList.js","unrelatedCounter.js","App.js","index.js"],"names":["generateDataState","shortid","getDisplayName","Component","initializer","initialData","data","state","reducer","unidata","updater","action","UnidataContext","createContext","store","dispatch","UnidataProvider","children","useReducer","value","subscribe","subscribed","MemoizedUnidataComponent","props","useContext","changedData","subscribedData","hasChanged","Object","subscribedState","useEffect","useUnidata","parentProps","SubscribedComponent","React","createLogger","content","logs","id","generate","time","Date","lastContent","writtenLogs","forEach","l","i","push","count","currentContent","length","map","log","key","toLocaleTimeString","Counter","this","todos","filter","t","completed","PureComponent","CheckboxField","e","target","checked","setValue","Field","label","validators","test","required","errorMessage","minlen","type","todo","useModel","todoModel","change","extractFromEvent","onChange","name","onClick","preventDefault","isValid","todoData","clearData","error","message","parseInt","counter","increase","useCallback","App","colStyles","padding","flexGrow","width","position","style","display","height","alignItems","href","right","top","src","alt","data-recalc-dims","color","backgroundColor","overflowY","boxShadow","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.70635a8a.chunk.js","sourcesContent":["import shortid from 'shortid'\r\nimport { mapValues } from 'lodash'\r\nimport { DataCollection, DataStateCollection } from './types'\r\n\r\nexport const generateDataState = (\r\n  newData: DataCollection\r\n): DataStateCollection =>\r\n  mapValues(newData, () => shortid.generate()) as DataStateCollection\r\n\r\nexport const getDisplayName = (\r\n  prefix: string,\r\n  Component: React.ElementType\r\n) => {\r\n  return `${prefix}${\r\n    (Component as React.FC).displayName ||\r\n    (Component as React.FC).name ||\r\n    'Component'\r\n  }`\r\n}\r\n","import { DataCollection, UnidataType, UnidataAction } from './types'\r\nimport { generateDataState } from './utils'\r\n\r\nexport const initializer = (initialData: DataCollection) => {\r\n  return { data: initialData, state: generateDataState(initialData) }\r\n}\r\n\r\nconst updater = (unidata: UnidataType, newData: DataCollection) => {\r\n  return {\r\n    data: {\r\n      ...unidata.data,\r\n      ...newData,\r\n    },\r\n    state: {\r\n      ...unidata.state,\r\n      ...generateDataState(newData),\r\n    },\r\n  }\r\n}\r\n\r\nexport const reducer = (\r\n  unidata: UnidataType,\r\n  action: UnidataAction\r\n): UnidataType => {\r\n  const updatedData = action(unidata.data)\r\n  return updater(unidata, updatedData)\r\n}\r\n","import React, { createContext, PropsWithChildren, useReducer } from 'react'\r\n\r\nimport { UnidataProviderProps, UnidataContextType } from './types'\r\nimport { reducer, initializer } from './reducer'\r\n\r\nexport const UnidataContext = createContext<UnidataContextType>({\r\n  store: {\r\n    data: {},\r\n    state: {},\r\n  },\r\n\r\n  dispatch: () => {},\r\n})\r\nUnidataContext.displayName = 'UnidataContext'\r\n\r\n/**\r\n * Wrapper of UnidataContext.Provider\r\n * @param {UnidataProviderProps} props\r\n */\r\nexport const UnidataProvider = ({\r\n  initialData,\r\n  children,\r\n}: PropsWithChildren<UnidataProviderProps>) => {\r\n  const [store, dispatch] = useReducer(reducer, initialData, initializer)\r\n\r\n  return (\r\n    <UnidataContext.Provider value={{ store, dispatch }}>\r\n      {children}\r\n    </UnidataContext.Provider>\r\n  )\r\n}\r\n","import { mapValues, values, pick } from 'lodash'\r\nimport React, { useContext, useEffect } from 'react'\r\nimport { UnidataContext } from './provider'\r\nimport {\r\n  SubscribedComponentProps,\r\n  DataCollection,\r\n  UnidataAction,\r\n} from './types'\r\nimport { getDisplayName } from './utils'\r\n\r\n/**\r\n * Hooks to return data the Component is listening to, state key, and data setter functions\r\n * @param {DataCollection} subscribed Data which the component want to subscribe to. { name: defaultValue }\r\n */\r\nexport const useUnidata = (\r\n  subscribed: DataCollection = {}\r\n): [DataCollection, React.Dispatch<UnidataAction>, string] => {\r\n  const { dispatch, store } = useContext(UnidataContext)\r\n  const { data, state } = store\r\n\r\n  const changedData: DataCollection = {}\r\n  const subscribedData = mapValues(subscribed, (v, k) => {\r\n    if (data[k] !== undefined || data[k] === v) return data[k]\r\n    changedData[k] = v\r\n    return v\r\n  })\r\n\r\n  const hasChanged = Object.keys(changedData).length > 0\r\n\r\n  const subscribedState = values(pick(state, Object.keys(subscribed))).join('-')\r\n\r\n  useEffect(() => {\r\n    if (hasChanged) {\r\n      dispatch(() => changedData)\r\n    }\r\n  }, [hasChanged, dispatch, changedData])\r\n\r\n  return [subscribedData, dispatch, subscribedState]\r\n}\r\n\r\n/**\r\n * Subscribe this component to specific data. Once those data change, Component will be rerender\r\n * @param {DataCollection} subscribed Data which the component want to subscribe to. { name: defaultValue }\r\n */\r\nexport const subscribe = (subscribed?: DataCollection) => (\r\n  WrappedComponent: React.ElementType\r\n) => {\r\n  const MemoizedUnidataComponent = (props: object): JSX.Element => {\r\n    const [data, dispatch, state] = useUnidata(subscribed || {})\r\n    const parentProps = { ...props }\r\n\r\n    const SubscribedComponent: React.ElementType<SubscribedComponentProps> = () => (\r\n      <WrappedComponent data={data} dispatch={dispatch} {...parentProps} />\r\n    )\r\n    SubscribedComponent.displayName = getDisplayName(\r\n      'UnidataSubscribed',\r\n      WrappedComponent\r\n    )\r\n    return React.useMemo(() => <SubscribedComponent state={state} />, [state])\r\n  }\r\n  MemoizedUnidataComponent.displayName = getDisplayName(\r\n    'UnidataMemoized',\r\n    WrappedComponent\r\n  )\r\n  return MemoizedUnidataComponent\r\n}\r\n","import React from 'react'\r\nimport { subscribe } from '@datnq/unidata'\r\nimport shortid from 'shortid'\r\n\r\nexport const createLogger = (dispatch) => (content) =>\r\n  dispatch(({ logs = [] }) => {\r\n    return {\r\n      logs: [...logs, { content, id: shortid.generate(), time: new Date() }],\r\n    }\r\n  })\r\n\r\nexport default subscribe({ logs: [] })(({ data }) => {\r\n  const { logs = [] } = data\r\n\r\n  const writtenLogs = []\r\n  let lastContent\r\n\r\n  logs.forEach((l, i) => {\r\n    if (i === 0) {\r\n      writtenLogs.push({ ...l, count: 1 })\r\n      lastContent = l.content\r\n      return\r\n    }\r\n    const currentContent = l.content\r\n    if (lastContent && currentContent === lastContent) {\r\n      writtenLogs[writtenLogs.length - 1].count += 1\r\n      writtenLogs[writtenLogs.length - 1].time = new Date()\r\n    } else {\r\n      writtenLogs.push({ ...l, count: 1 })\r\n      lastContent = currentContent\r\n    }\r\n  })\r\n\r\n  return (\r\n    writtenLogs && (\r\n      <div>\r\n        {writtenLogs.map((log) => (\r\n          <p key={log.id}>\r\n            <code>{log.time.toLocaleTimeString()}</code> &ndash; {log.content}\r\n            {log.count > 1 ? ` (${log.count})` : ''}\r\n          </p>\r\n        ))}\r\n      </div>\r\n    )\r\n  )\r\n})\r\n","import React from 'react'\r\nimport { subscribe } from '@datnq/unidata'\r\nimport { createLogger } from './logger'\r\n\r\nclass Counter extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props)\r\n    this.log = createLogger(this.props.dispatch)\r\n  }\r\n  componentDidMount() {\r\n    this.log && this.log('Rendering Todo Counter')\r\n  }\r\n  render() {\r\n    const { data } = this.props\r\n    return (\r\n      <span>\r\n        Completed: {data.todos.filter((t) => t.completed).length}/\r\n        {data.todos.length}\r\n      </span>\r\n    )\r\n  }\r\n}\r\n\r\nexport default subscribe({\r\n  todos: [],\r\n})(Counter)\r\n","import { required, minlen } from '@datnq/usemodel/dist/validators.ts'\r\nimport { Field } from '@datnq/usemodel'\r\n\r\nclass CheckboxField extends Field {\r\n  extractFromEvent(e) {\r\n    const {\r\n      target: { value, checked },\r\n    } = e\r\n    this.setValue(checked ? value : null)\r\n  }\r\n}\r\n\r\nexport default () => {\r\n  return {\r\n    content: {\r\n      label: 'Todo Content',\r\n      validators: [\r\n        { test: required(), errorMessage: '%(label)s is required' },\r\n        {\r\n          test: minlen(6),\r\n          errorMessage: '%(label)s must be longer than 6 characters',\r\n        },\r\n      ],\r\n    },\r\n    completed: {\r\n      label: 'Completed',\r\n      type: CheckboxField,\r\n    },\r\n  }\r\n}\r\n","/* eslint-disable jsx-a11y/label-has-associated-control */\r\nimport React, { useEffect } from 'react'\r\nimport { useModel } from '@datnq/usemodel'\r\nimport { subscribe } from '@datnq/unidata'\r\nimport todoModel from './model/todos'\r\nimport { createLogger } from './logger'\r\n\r\nconst AddTodo = ({ dispatch }) => {\r\n  const log = createLogger(dispatch)\r\n\r\n  const todo = useModel(todoModel)\r\n  const { content, completed } = todo\r\n\r\n  const change = (e) => {\r\n    todo.extractFromEvent(e)\r\n  }\r\n\r\n  const addtodo = (e) => {\r\n    e.preventDefault()\r\n    if (!todo.isValid) return\r\n\r\n    const todoData = todo.data\r\n    dispatch(({ todos }) => {\r\n      return {\r\n        todos: [...todos, todoData],\r\n      }\r\n    })\r\n    todo.clearData()\r\n  }\r\n\r\n  useEffect(() => {\r\n    log('Rendering Add Todo')\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type='text'\r\n        onChange={change}\r\n        name={content.name}\r\n        value={content.value}\r\n      />\r\n      <label>\r\n        <input\r\n          type='checkbox'\r\n          name={completed.name}\r\n          checked={completed.value === 'completed'}\r\n          value='completed'\r\n          onChange={change}\r\n        />{' '}\r\n        Completed\r\n      </label>\r\n      <button type='button' onClick={addtodo}>\r\n        Add todo\r\n      </button>\r\n      <br />\r\n      {content.isValid ? null : <p>{content.error.message}</p>}\r\n    </div>\r\n  )\r\n}\r\nexport default subscribe()(AddTodo)\r\n","import React, { useEffect } from 'react'\r\nimport { subscribe } from '@datnq/unidata'\r\nimport { createLogger } from './logger'\r\n\r\nconst TodoList = ({ data, dispatch }) => {\r\n  const { todos } = data\r\n\r\n  const log = createLogger(dispatch)\r\n\r\n  const change = (e) => {\r\n    const {\r\n      target: { checked, value },\r\n    } = e\r\n\r\n    dispatch(({ todos, logs }) => {\r\n      const index = parseInt(value, 10)\r\n      todos[index].completed = checked\r\n      return { todos }\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    log('Rendering Todo list')\r\n  })\r\n\r\n  return (\r\n    <ol>\r\n      {todos.map((todo, id) => (\r\n        <li key={todo.content}>\r\n          <input\r\n            type='checkbox'\r\n            checked={todo.completed}\r\n            value={id}\r\n            onChange={change}\r\n          />\r\n          {todo.completed ? <s>{todo.content}</s> : todo.content}\r\n        </li>\r\n      ))}\r\n    </ol>\r\n  )\r\n}\r\nexport default subscribe({\r\n  todos: [],\r\n})(TodoList)\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { subscribe } from '@datnq/unidata'\r\nimport { createLogger } from './logger'\r\n\r\nexport default subscribe({ counter: 0 })(({ data, dispatch }) => {\r\n  const log = createLogger(dispatch)\r\n\r\n  const increase = useCallback(() => {\r\n    dispatch(({ counter }) => {\r\n      return {\r\n        counter: counter + 1,\r\n      }\r\n    })\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    log('Rendering Unrelated counter')\r\n  })\r\n\r\n  return (\r\n    <p>\r\n      <button type='button' onClick={increase}>\r\n        + Increase\r\n      </button>\r\n      {' ' + data.counter}\r\n    </p>\r\n  )\r\n})\r\n","import React from 'react'\r\nimport Counter from './counter'\r\nimport AddTodo from './addTodo'\r\nimport TodoList from './todoList'\r\nimport UnrelatedCounter from './unrelatedCounter'\r\nimport Logger from './logger'\r\n\r\nexport default function App() {\r\n  const colStyles = {\r\n    padding: '20px',\r\n    flexGrow: 1,\r\n    width: '50%',\r\n    position: 'relative',\r\n  }\r\n  return (\r\n    <>\r\n      <div style={{ display: 'flex', height: '100vh', alignItems: 'stretch' }}>\r\n        <div style={colStyles}>\r\n          <a\r\n            href='https://github.com/datnq/unidata'\r\n            style={{ position: 'absolute', right: 0, top: 0 }}\r\n          >\r\n            <img\r\n              width='149'\r\n              height='149'\r\n              src='https://github.blog/wp-content/uploads/2008/12/forkme_right_darkblue_121621.png?resize=149%2C149'\r\n              alt='Fork me on GitHub'\r\n              data-recalc-dims='1'\r\n            />\r\n          </a>\r\n          <AddTodo />\r\n          <hr />\r\n          <Counter />\r\n          <UnrelatedCounter />\r\n          <TodoList />\r\n        </div>\r\n        <div\r\n          style={{\r\n            ...colStyles,\r\n            color: '#fff',\r\n            backgroundColor: '#333',\r\n            overflowY: 'scroll',\r\n            boxShadow: 'inset 0 0 20px rgba(0,0,0,.4)',\r\n          }}\r\n        >\r\n          <h2>Rendering logger</h2>\r\n          <Logger />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { UnidataProvider } from '@datnq/unidata'\r\n\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n  <UnidataProvider initialData={{}}>\r\n    <App />\r\n  </UnidataProvider>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}